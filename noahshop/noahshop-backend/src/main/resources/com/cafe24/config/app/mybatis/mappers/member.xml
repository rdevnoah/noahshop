<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<insert id="insert" parameterType="membervo">
   		<![CDATA[
		insert into member 
		values(nextval('member_no_seq')
				, encode(encrypt(convert_to(#{id },'utf8'),convert_to(#{key },'utf8'), 'aes'),'hex')
				, #{password }
				, encode(encrypt(convert_to(#{name },'utf8'),convert_to(#{key },'utf8'), 'aes'),'hex')
				, encode(encrypt(convert_to(#{tel },'utf8'),convert_to(#{key },'utf8'), 'aes'),'hex')
				, encode(encrypt(convert_to(#{address },'utf8'),convert_to(#{key },'utf8'), 'aes'),'hex')
				, encode(encrypt(convert_to(#{email },'utf8'),convert_to(#{key },'utf8'), 'aes'),'hex')
				, now()
				, 'USER')
		]]>
		<selectKey resultType="long" keyProperty="no" order="AFTER">
			select currval('member_no_seq')
		</selectKey>
		
	</insert>

	<select id="getById" resultType="membervo" parameterType="string">
		select m.no,
			   m.password,
			   convert_from(decrypt(decode(m.id,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as id,
			   convert_from(decrypt(decode(m.name,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as name,
			   convert_from(decrypt(decode(m.tel,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as tel,
			   convert_from(decrypt(decode(m.address,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as address,
			   convert_from(decrypt(decode(m.email,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as email,
			   join_date as joinDate,
			   role
		from member m,
			 (select encode(encrypt(convert_to(#{_parameter },'utf8'),convert_to(a.key,'utf8'), 'aes'),'hex') as id from (select key from key) a) b,
			 key k
		where m.id=b.id and k.member_no=m.no
	</select>


	<delete id="deleteAll">
		<![CDATA[
			delete from member
		]]>
	</delete>
	
	<delete id="deleteAllKey">
		<![CDATA[
			delete from key
		]]>
	</delete>
	
	<insert id="insertKey" parameterType="map">
	   	<![CDATA[
		insert into key(member_no, key)
		values(#{member.no }, #{key })
		]]>
	</insert>
	
	<select id="checkId" parameterType="string" resultType="string">
		<![CDATA[
		select id 
		from (select convert_from(decrypt(decode(m.id,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as id 
				from member m, key k 
				where m.no = k.member_no) a
		where id=#{id }
		]]>
	</select>
	
	<select id="getMemberByNo" parameterType="map" resultType="membervo">
		<![CDATA[
			select no
			, convert_from(decrypt(decode(id,'hex'), convert_to(#{key }, 'utf8'),'aes'),'utf8') as id
			, password
			, convert_from(decrypt(decode(name,'hex'), convert_to(#{key }, 'utf8'),'aes'),'utf8') as name
			, convert_from(decrypt(decode(tel,'hex'), convert_to(#{key }, 'utf8'),'aes'),'utf8') as tel
			, convert_from(decrypt(decode(address,'hex'), convert_to(#{key }, 'utf8'),'aes'),'utf8') as address
			, convert_from(decrypt(decode(email,'hex'), convert_to(#{key }, 'utf8'),'aes'),'utf8') as email
			, join_date as joinDate
			, role
			from member where no=#{no }
		]]>
	</select>

	<update id="updateMember" parameterType="map">
			update member
			set password=#{vo.password }
				, address = encode(encrypt(convert_to(#{vo.address },'utf8'),convert_to(#{key },'utf8'), 'aes'),'hex')
				, tel = encode(encrypt(convert_to(#{vo.tel },'utf8'),convert_to(#{key},'utf8'), 'aes'), 'hex')
			where no=#{vo.no }
	</update>
	
	<select id="getKeyByNo" parameterType="long" resultType="string">
		<![CDATA[
			select key from key where member_no=#{no }
		]]>
	</select>

	<select id="getMemberByIdAndPassword" parameterType="membervo" resultType="membervo">
		select m.no,
			   convert_from(decrypt(decode(m.id,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as id,
			   convert_from(decrypt(decode(name,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as name,
			   convert_from(decrypt(decode(tel,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as tel,
			   convert_from(decrypt(decode(address,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as address,
			   convert_from(decrypt(decode(email,'hex'), convert_to(k.key, 'utf8'),'aes'),'utf8') as email,
			   join_date as joinDate,
			   role
		from member m,
			 (select encode(encrypt(convert_to(#{id },'utf8'),convert_to(a.key,'utf8'), 'aes'),'hex') as id from (select key from key) a) b,
			 key k
		where m.id=b.id and k.member_no=m.no and m."password"=#{password }
	</select>

	<select id="getOrderListById" parameterType="long" resultType="ordervo">
		select o.no, o.order_code as orderCode, o.address, o.payment, o.price, o.status, d.status as deliveryStatus
		from "order" o, delivery d
		where o.no=d.no and o.member_no=#{no }
	</select>


	<select id="getOrderByNoMember" parameterType="map" resultType="ordervo">
		select o.no, o.order_code as orderCode, o.address, o.payment, o.price, o.status, d.status as deliveryStatus
		from "order" o, delivery d
		where o.no=d.no and o.order_code=#{code } and o.password=#{password }
	</select>

</mapper>
